{"version":3,"sources":["ui/generation/step2/step2.module.scss","ui/generation/dropzone/dropzone.module.scss","generation/fs/image.ts","generation/packing/imagePacking.ts","generation/template/parse.ts","generation/font/Font.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","generation/font/specSaver.ts","generation/font/download.ts","ui/generation/dropzone/Dropzone.tsx","ui/generation/step2/Step2.tsx"],"names":["module","exports","blobToCanvas","blob","Promise","resolve","dataUrl","URL","createObjectURL","image","document","createElement","onload","createCanvas","width","height","canvas","ctx","drawImage","remove","revokeObjectURL","src","packFromSheet","source","rects","data","packedRects","nextX","nextY","furthestSoFar","lowestSoFar","sort","a","b","h","map","rect","w","packed","x","y","sourceRect","pack","forEach","parseTemplateCode","code","json","atob","codePayload","JSON","parse","version","Error","Number","isInteger","base","Array","isArray","slots","incorrectSlot","find","slot","length","value","stringify","generateFont","templateImg","templateCode","fontConfig","tempConfig","unicode","character","String","fromCharCode","template","Template","sourceRects","index","getSlotPosition","slotDim","packedTexture","convertToBlob","packedBlob","specification","info","face","size","stretchH","aa","padding","up","right","down","left","spacing","horizontal","horizontalSpacing","vertical","verticalSpacing","outline","common","lineHeight","scaleW","scaleH","pages","id","file","chars","charCodeAt","xoffset","yoffset","xadvance","page","chnl","_toConsumableArray","arr","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","txtTag","name","properties","joinedProps","prop","toString","join","xmlTag","fontSpecToTextFile","format","tag","infoTag","commonTag","pageTags","charTags","char","downloadBmf","fntFile","files","input","i","downloadArchive","Dropzone","props","templateInput","React","createRef","type","this","dataType","handleDropzoneInput","stateTarget","current","handleFileInput","event","preventDefault","dataTransfer","renderUploadedFileName","templateName","className","styles","fileName","container","onDrop","handleDrop","onDragOver","dragOver","onDragEnter","dragEnter","onDragLeave","dragLeave","label","inputName","inputContainer","aria-label","ref","onChange","handleInput","accept","acceptedInputType","title","Component","bind","Step2","state","horizontalMargin","verticalMargin","setState","prevState","isCodeInputValid","target","parseInt","text","standardizeNumericalInput","fontSpec","dropzones","options","option","optionsLabel","optionsInput","handleNumericalInput","Fa","icon","times","questionMark","download","buttonsContainerLabel","buttons","onClick","downloadFont","downloadButton","disabled","isInputsValid","samplesParagraph","href","samplesLink","rel","heading","instructionList","instructionListItem","featureList","feature","goodbye"],"mappings":"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","file":"static/js/3.5de2bd42.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"step2_container__mP1Lb\",\"instructionList\":\"step2_instructionList__A_Js5\",\"instructionListItem\":\"step2_instructionListItem__24XyX\",\"heading\":\"step2_heading__284k2\",\"feature\":\"step2_feature__2lqil\",\"goodbye\":\"step2_goodbye__2mpGb\",\"featureList\":\"step2_featureList___0abW\",\"dropzones\":\"step2_dropzones__2utFp\",\"options\":\"step2_options__3tola\",\"label\":\"step2_label__3qcY3\",\"optionsLabel\":\"step2_optionsLabel__2tyAP\",\"buttonsContainerLabel\":\"step2_buttonsContainerLabel__3VAjD\",\"optionsInput\":\"step2_optionsInput__2ZWmB\",\"times\":\"step2_times__263gt\",\"questionMark\":\"step2_questionMark__3yZuf\",\"option\":\"step2_option__2yRFz\",\"downloadButton\":\"step2_downloadButton__3smy0\",\"download\":\"step2_download__1hxQw\",\"buttons\":\"step2_buttons__1G7PN\",\"samplesParagraph\":\"step2_samplesParagraph__12U9D\",\"samplesLink\":\"step2_samplesLink__3X2DM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"dropzone_container__3YvRs\",\"inputContainer\":\"dropzone_inputContainer__OD9Y7\",\"label\":\"dropzone_label__xsqTw\",\"fileName\":\"dropzone_fileName__CjjRG\",\"input\":\"dropzone_input__3YtRE\"};","import { createCanvas } from \"../../utils/canvasHelpers\"\n\nexport function blobToCanvas(blob: Blob): Promise<[HTMLCanvasElement, CanvasRenderingContext2D]> {\n    return new Promise(resolve => {\n        const dataUrl = URL.createObjectURL(blob)\n        const image = document.createElement('img')\n\n        image.onload = () => {\n            const [canvas, ctx] = createCanvas(image.width, image.height)\n\n            ctx.drawImage(image, 0, 0)\n\n            image.remove()\n            URL.revokeObjectURL(dataUrl)\n\n            resolve([canvas, ctx])\n        }\n\n        image.src = dataUrl\n    })\n}\n","import { createCanvas } from '../../utils/canvasHelpers'\nimport { Slot } from '../template/types'\n\nexport interface SourceRect {\n    x: number,\n    y: number,\n    w: number,\n    h: number,\n    slot: Slot\n}\n\nexport interface PackedRect {\n    x: number,\n    y: number,\n    sourceRect: SourceRect\n}\n\ninterface PackedData {\n    packedRects: PackedRect[],\n    width: number,\n    height: number\n}\n\nfunction pack(rects: SourceRect[], width: number): PackedData {\n    const data: PackedData = {\n        packedRects: [],\n        width: 0,\n        height: 0\n    }\n    \n    let nextX = 0\n    let nextY = 0\n    let furthestSoFar = 0\n    let lowestSoFar = 0\n\n    data.packedRects = rects\n        .sort((a, b) => b.h - a.h)\n        .map(rect => {\n            if (nextX + rect.w > width) {\n                nextX = 0\n                nextY = lowestSoFar\n            }\n\n            if (nextX + rect.w > furthestSoFar) {\n                furthestSoFar = nextX + rect.w\n            }\n\n            if (nextY + rect.h > lowestSoFar) {\n                lowestSoFar = nextY + rect.h\n            }\n\n            const packed = {\n                x: nextX,\n                y: nextY,\n                sourceRect: rect\n            }\n\n            nextX += rect.w\n\n            return packed\n        })\n    \n    data.width = furthestSoFar\n    data.height = lowestSoFar\n\n    return data\n}\n\nexport function packFromSheet(source: HTMLCanvasElement, rects: SourceRect[]): [HTMLCanvasElement, PackedRect[]] {\n    const { width, height, packedRects } = pack(rects, source.width)\n    const [canvas, ctx] = createCanvas(width, height)\n\n    packedRects.forEach(({ x, y, sourceRect }) => {\n        const { w, h } = sourceRect\n        ctx.drawImage(source, sourceRect.x, sourceRect.y, w, h, x, y, w, h)\n    })\n\n    return [canvas, packedRects]\n}\n","import { CodePayload } from './types'\n\nexport function parseTemplateCode(code: string): CodePayload {\n    const json = atob(code)\n    const codePayload: CodePayload = JSON.parse(json)\n\n    if (codePayload.version !== 0) {\n        throw new Error(`Only templates version '0' are supported, instead got version '${codePayload.version}'`)\n    }\n\n    if (!Number.isInteger(codePayload.base)) {\n        throw new Error(`Property 'base' must be an integer, instead got: ${typeof codePayload.base} '${codePayload.base}'`)\n    }\n\n    if (!Array.isArray(codePayload.slots)) {\n        throw new Error(`Property 'slots' must be an array, instead got: ${codePayload.slots} '${codePayload.slots}'`)\n    }\n\n    const incorrectSlot = codePayload.slots.find(slot => !Array.isArray(slot) || slot.length !== 3 || slot.find(value => !Number.isInteger(value)))\n    if (incorrectSlot) {\n        throw new Error(`Each slot must be a three element array (integers only). Instead found: ${JSON.stringify(incorrectSlot)}`)\n    }\n\n    return codePayload\n}\n","import { convertToBlob } from '../../utils/canvasHelpers';\nimport { blobToCanvas } from '../fs/image';\nimport { packFromSheet, SourceRect } from '../packing/imagePacking';\nimport { parseTemplateCode } from '../template/parse';\nimport Template from '../template/Template';\n\nexport interface FontSpec {\n    info: {\n        face: string\n        size: number\n        stretchH: number\n        aa: number\n        padding: {\n            up: number\n            right: number\n            down: number\n            left: number\n        }\n        spacing: {\n            horizontal: number\n            vertical: number\n        }\n        outline: number\n    }\n    common: {\n        lineHeight: number\n        base: number\n        scaleW: number\n        scaleH: number\n        pages: number\n    }\n    pages: {\n        id: number\n        file: string\n    }[]\n    chars: {\n        id: number\n        x: number\n        y: number\n        width: number\n        height: number\n        xoffset: number\n        yoffset: number\n        xadvance: number\n        page: number\n        chnl: 1 | 2 | 4 | 8 | 15\n    }[]\n}\n\nexport interface FontConfig {\n    horizontalSpacing: number\n    verticalSpacing: number\n    lineHeight: number\n}\n\nexport async function generateFont(templateImg: Blob, templateCode: string, fontConfig: FontConfig): Promise<[FontSpec, Blob[]]> {\n    const tempConfig = parseTemplateCode(templateCode)\n    const slots = tempConfig.slots.map(([ unicode, width, height ]) => ({ character: String.fromCharCode(unicode), width, height }))\n    const template = new Template(slots, tempConfig.base)\n\n    const [canvas] = await blobToCanvas(templateImg)\n\n    const sourceRects: SourceRect[] = slots.map((slot, index) => ({\n        slot,\n        x: template.getSlotPosition(index + 1).x + template.slotDim.w / 2 - (slot.width - 2) / 2,\n        y: template.getSlotPosition(index + 1).y + template.slotDim.h / 2 - (slot.height - 2) / 2,\n        w: slot.width - 2,\n        h: slot.height - 2\n    }))\n\n    const [packedTexture, packedRects] = packFromSheet(canvas, sourceRects)\n    const packedBlob = await convertToBlob(packedTexture)\n\n    const specification: FontSpec = {\n        info: {\n            face: 'calligro-custom',\n            size: 12,\n            stretchH: 100,\n            aa: 1,\n            padding: {\n                up: 0,\n                right: 0,\n                down: 0,\n                left: 0\n            },\n            spacing: {\n                horizontal: fontConfig.horizontalSpacing,\n                vertical: fontConfig.verticalSpacing\n            },\n            outline: 0\n        },\n        common: {\n            lineHeight: fontConfig.lineHeight,\n            base: tempConfig.base,\n            scaleW: canvas.width,\n            scaleH: canvas.height,\n            pages: 1\n        },\n        pages: [\n            {\n                id: 0,\n                file: 'calligro-page-0.png'\n            }\n        ],\n        chars: packedRects.map(rect => ({\n            id: rect.sourceRect.slot.character.charCodeAt(0),\n            x: rect.x,\n            y: rect.y,\n            width: rect.sourceRect.w,\n            height: rect.sourceRect.h,\n            xoffset: 0,\n            yoffset: 0,\n            xadvance: rect.sourceRect.w,\n            page: 0,\n            chnl: 15\n        }))\n    }\n\n    return [specification, [packedBlob]]\n}\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { FontSpec } from \"./Font\";\n\ntype tagProp = [string, string | number]\n\nfunction txtTag(name: string, properties: tagProp[]) {\n    const joinedProps = properties.map(([ prop, value ]) => `${prop}=${value.toString()}`).join(' ')\n    return `${name} ${joinedProps}`\n}\n\nfunction xmlTag(name: string, properties: tagProp[]) {\n    const joinedProps = properties.map(([ prop, value ]) => `${prop}=\"${value.toString()}\"`).join(' ')\n    return `<${name} ${joinedProps} />`\n}\n\nexport function fontSpecToTextFile(specification: FontSpec, format: 'txt' | 'xml') {\n    const tag = format === 'txt' ? txtTag : xmlTag\n\n    const info = specification.info\n    const infoTag = tag('info', [\n        ['face', info.face],\n        ['size', info.size],\n        ['unicode', '1'],\n        ['stretchH', info.stretchH],\n        ['aa', info.stretchH],\n        ['padding', `${info.padding.up},${info.padding.right},${info.padding.down},${info.padding.left}`],\n        ['spacing', `${info.spacing.horizontal},${info.spacing.vertical}`]\n    ])\n\n    const common = specification.common\n    const commonTag = tag('common', [\n        ['lineHeight', common.lineHeight],\n        ['base', common.base],\n        ['scaleW', common.scaleW],\n        ['scaleH', common.scaleH],\n        ['pages', common.pages]\n    ])\n\n    const pageTags = specification.pages.map(page => tag('page', [\n        ['id', page.id],\n        ['file', page.file]\n    ]))\n\n    const charTags = specification.chars.map(char => tag('char', [\n        ['id', char.id],\n        ['x', char.x],\n        ['y', char.y],\n        ['width', char.width],\n        ['height', char.height],\n        ['xoffset', char.xoffset],\n        ['yoffset', char.yoffset],\n        ['xadvance', char.xadvance],\n        ['page', char.page],\n        ['chnl', char.chnl]\n    ]))\n\n    switch(format) {\n        case 'txt':\n            return [\n                infoTag,\n                commonTag,\n                ...pageTags,\n                ...charTags\n            ].join('\\n')\n        \n        case 'xml':\n            const font = [\n                infoTag,\n                commonTag,\n                '<pages>',\n                ...pageTags.map(tag => `\\t${tag}`),\n                '</pages>',\n                `<chars count=\"${charTags.length}\">`,\n                ...charTags.map(tag => `\\t${tag}`),\n                '</chars>'\n            ].join('\\n\\t')\n\n            return [\n                '<?xml version=\"1.0\"?>',\n                '<font>',\n                '\\t' + font,\n                '</font>'\n            ].join('\\n')\n    }\n}\n","import { downloadArchive, ZippedFile } from \"../fs/zip\";\n\nexport async function downloadBmf(fntFile: string, pages: Blob[]): Promise<void> {\n    const files: ZippedFile[] = [\n        {\n            name: 'calligro-font.fnt',\n            input: fntFile\n        },\n        ...pages.map((page, i) => ({\n            name: `calligro-page-${i}.png`,\n            input: page\n        }))\n    ]\n\n    return downloadArchive('calligro-font', files)\n}\n","import { bind } from 'helpful-decorators'\nimport React, { Component } from 'react'\nimport styles from './dropzone.module.scss'\n\ninterface DropzoneProps {\n    handleDropzoneInput: (stateTarget: 'template' | 'templateCode', data: Blob) => void\n    templateName?: string\n    acceptedInputType: string\n    dataType: string\n    inputName: string\n    stateTarget: 'template' | 'templateCode'\n}\n\nclass Dropzone extends Component<DropzoneProps, {}> {\n    private templateInput: React.RefObject<HTMLInputElement>\n\n    constructor(props: DropzoneProps) {\n        super(props)\n\n        this.templateInput = React.createRef()\n    }\n\n    handleFileInput(data?: File) {\n        if (data && data.type === this.props.dataType) {\n            this.props.handleDropzoneInput(this.props.stateTarget, data)\n        }\n    }\n\n    @bind\n    handleInput() {\n        const data = this.templateInput.current?.files?.[0]\n       \n        this.handleFileInput(data)\n    }\n\n    @bind\n    handleDrop(event: React.DragEvent<HTMLDivElement>) {\n        event.preventDefault()\n        const data = event.dataTransfer.files[0]\n\n        this.handleFileInput(data)\n    }\n\n    dragOver (event: React.DragEvent<HTMLDivElement>) {\n        event.preventDefault()\n    }\n    \n    @bind\n    dragEnter (event: React.DragEvent<HTMLDivElement>) {\n        event.preventDefault()\n    }\n    \n    @bind\n    dragLeave (event: React.DragEvent<HTMLDivElement>) {\n        event.preventDefault()\n    }\n\n    render() {\n        const renderUploadedFileName = this.props.templateName\n            ? <p className={styles.fileName}>Uploaded {this.props.templateName}</p>\n            : null\n\n        return (\n            <div\n                className={styles.container}\n                onDrop={this.handleDrop}\n                onDragOver={this.dragOver}\n                onDragEnter={this.dragEnter}\n                onDragLeave={this.dragLeave}\n            >\n                <label className={styles.label}>Drag&drop the {this.props.inputName}</label>\n                <div className={styles.inputContainer}>\n                    <input\n                        aria-label={`${this.props.inputName} input`}\n                        className={styles.input}\n                        type='file' ref={this.templateInput}\n                        onChange={this.handleInput}\n                        accept={this.props.acceptedInputType}\n                        title=\" \"\n                    />\n                </div>\n                {renderUploadedFileName}\n            </div>\n        )\n    }\n}\n\nexport default Dropzone\n","import { bind } from 'helpful-decorators'\nimport React, { Component } from 'react'\nimport { generateFont } from '../../../generation/font/Font'\nimport { fontSpecToTextFile } from '../../../generation/font/specSaver'\nimport { downloadBmf } from '../../../generation/font/download'\nimport styles from './step2.module.scss'\nimport Dropzone from '../dropzone/Dropzone'\nimport Fa from '../../misc/fa/Fa'\nimport { NumInputValue, standardizeNumericalInput } from '../../../utils/input'\n\ninterface Step2State {\n    horizontalMargin: NumInputValue\n    verticalMargin: NumInputValue\n    lineHeight: NumInputValue\n    template?: File\n    templateCode?: File\n}\n\nclass Step2 extends Component<{}, Step2State> {\n    constructor(props: {}) {\n        super(props)\n\n        this.state = {\n            horizontalMargin: 0,\n            verticalMargin: 0,\n            lineHeight: 0\n        }\n    }\n\n    @bind\n    handleDropzoneInput(stateTarget: 'template' | 'templateCode', data: Blob) {\n        this.setState(prevState => ({\n            ...prevState,\n            [stateTarget] : data\n        }))\n    }\n\n    @bind\n    isInputsValid(): boolean {\n        const isCodeInputValid = !!this.state.templateCode && this.state.templateCode.type === 'text/plain'\n        const isTemplateInputValid = !!this.state.template && this.state.template.type === 'image/png'\n    \n        return isTemplateInputValid && isCodeInputValid\n    }\n    \n    @bind\n    handleNumericalInput(event: React.ChangeEvent<HTMLInputElement>, name: 'horizontalMargin' | 'verticalMargin' | 'lineHeight') {\n        const value = event.target.value === '' ? '' : parseInt(event.target.value, 10)\n\n        if (value === '' || value >= 0) {\n            this.setState(prevState => ({\n                ...prevState,\n                [name]: value\n            }))\n        }\n    }\n\n    @bind\n    async downloadFont(format: 'txt' | 'xml') {\n        if (!this.state.template || !this.state.templateCode) {\n            return\n        }\n\n        const templateImg = this.state.template\n        const templateCode = await this.state.templateCode.text()\n\n        const [fontSpec, pages] = await generateFont(templateImg, templateCode, {\n            horizontalSpacing: standardizeNumericalInput(this.state.horizontalMargin) ,\n            verticalSpacing: standardizeNumericalInput(this.state.verticalMargin),\n            lineHeight: standardizeNumericalInput(this.state.lineHeight)\n        })\n\n        const fntFile = fontSpecToTextFile(fontSpec, format)\n\n        downloadBmf(fntFile, pages)\n    }\n\n    render() {\n        return(\n            <div className={styles.container}>\n                <div>\n                    <div className={styles.dropzones}>\n                        <Dropzone\n                            inputName='image'\n                            acceptedInputType='.png'\n                            dataType='image/png'\n                            stateTarget='template'\n                            handleDropzoneInput={this.handleDropzoneInput}\n                            templateName={this.state.template?.name}\n                        />\n\n                        <Dropzone\n                            inputName='code file'\n                            acceptedInputType='.txt'\n                            dataType='text/plain'\n                            stateTarget='templateCode'\n                            handleDropzoneInput={this.handleDropzoneInput}\n                            templateName={this.state.templateCode?.name}\n                        />\n                    </div>\n\n                    <div className={styles.options}>\n                        <label className={styles.label}>Font options</label>\n                        <div className={styles.option}>\n                            <label className={styles.optionsLabel}>Margin</label>\n                            <input\n                                aria-label='horizontal margin input'\n                                className={styles.optionsInput}\n                                type='number'\n                                onChange={(event) => this.handleNumericalInput(event, 'horizontalMargin')}\n                                value={this.state.horizontalMargin}\n                            />\n                            <Fa icon='fas fa-times' className={styles.times} />\n                            <input\n                                aria-label='vertical margin input'\n                                className={styles.optionsInput}\n                                type='number'\n                                onChange={(event) => this.handleNumericalInput(event, 'verticalMargin')}\n                                value={this.state.verticalMargin}\n                            />\n                            <Fa icon='fas fa-question' className={styles.questionMark} title='Horizontal and vertical distance between characters in pixels'/>\n                        </div>\n                        \n                        <div className={styles.option}>\n                            <label className={styles.optionsLabel}>Line height</label>\n                            <input\n                                aria-label='line height input'\n                                className={styles.optionsInput}\n                                type='number'\n                                onChange={(event) => this.handleNumericalInput(event, 'lineHeight')}\n                                value={this.state.lineHeight}\n                            />\n                            <Fa icon='fas fa-question' className={styles.questionMark} title='Distance from the bottom of a line to the top of the next one in pixels'/>\n                        </div>\n\n                        <div className={styles.download}>\n                            <label className={styles.buttonsContainerLabel}>Download font</label>\n\n                            <div className={styles.buttons}>\n                                <div>\n                                    <button onClick={() => this.downloadFont('txt')} className={styles.downloadButton} disabled={!this.isInputsValid()} >txt format</button>\n                                    <Fa icon='fas fa-question' className={styles.questionMark} title='Supported by Godot, LibGDX, Heaps.io and possibly others.'/>\n                                </div>\n\n                                <div>\n                                    <button onClick={() => this.downloadFont('xml')} className={styles.downloadButton} disabled={!this.isInputsValid()} >xml format</button>\n                                    <Fa icon='fas fa-question' className={styles.questionMark} title='Supported by Phaser and possibly others.'/>\n                                </div>\n                            </div>\n                            \n                            <p className={styles.samplesParagraph}>\n                                Check\n                                <a\n                                    href='https://github.com/Voycawojka/calligro/tree/main/samples'\n                                    className={styles.samplesLink}\n                                    target='_blank'\n                                    rel='noreferrer'\n                                >\n                                    our samples\n                                </a>\n                                to see how to use it\n                            </p>\n                        </div>\n                    </div>\n                </div>\n\n                <div>\n                    <div>\n                        <h2 className={styles.heading}>Step 2 - Generate your font</h2>\n                        \n                        <ol className={styles.instructionList}>\n                            <li className={styles.instructionListItem}>Upload the template image with your characters drawn on it. Nothing is sent to a server, everything stays in your browser.</li>\n                            <li className={styles.instructionListItem}>Upload the txt file downloaded togheter with the template image earlier (it contains template metadata).</li>\n                            <li className={styles.instructionListItem}>Specify the horizontal and vertical margins for characters.</li>\n                            <li className={styles.instructionListItem}>Specify the font line height (distance from the top of one line to the top of the next one).</li>\n                            <li className={styles.instructionListItem}>Generate and download your BMFont.</li>\n                        </ol>\n                    </div>\n\n                    <div >\n                        <h2 className={styles.heading}>Coming soon</h2>\n\n                        <ul className={styles.featureList}>\n                            <li className={styles.feature}>Kerning pairs support (that is: non-monospace fonts)</li>\n                            <li className={styles.feature}>Font preview</li>\n                        </ul>\n\n                        <p className={styles.goodbye}>Stay tuned ;)</p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Step2\n"],"sourceRoot":""}